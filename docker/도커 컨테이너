# ireh 요약

## 도커 컨테이너

파일 시스템과 격리된 시스템 자원 및 네트워크를 사용할 수 있는 독립된 공간.

(도커 이미지의 목적에 맞도록 사용되는 것이 일반적)

### 컨테이너 생성

```bash
docker run -i -t [이미지 이름]:[태그]
```

docker run : 컨테이너를 생성하고 실행하는 역할

-i -t : 컨테이너와 상호 입출력 가능하게함 (두 옵션 중 하나라도 안하면 셸 정상 작동 안함)

위 명령어를 실행했을 때, 로컬 도커 엔진에 존재하지 않는 이미지라면 자동으로 다운받음.

위 명령어를 실행하면 컨테이너 내부에 들어가진다.

```bash
docker create -i -t --name mycentos centos:7
```

run 대신에 create 명령어를 사용할 수 있다. —name 옵션으로 컨테이너 이름을 설정한다.

run 명령어와 다른 점은 컨테이너를 생성만 하고 컨테이너로 들어가지 않는다.

![Untitled](ireh%20%E1%84%8B%E1%85%AD%E1%84%8B%E1%85%A3%E1%86%A8%207a005c31f2f84dfd8561505695751557/Untitled.png)

### 컨테이너 내부에서 빠져나오기

```bash
exit 
```

컨테이너 내부에서 빠져나온 동시에 컨테이너를 정지 시킴

```bash
Ctrl + P, Q // 컨테이너를 정지하지 않고 빠져나옴
```

### 이미지 받기

```bash
docker pull [이미지 이름]:[태그]
```

이미지 다운 받는 방법

### 로컬 이미지 확인

```bash
docker images
```

### 컨테이너 시작

```bash
docker start [컨테이너 이름]
```

### 컨테이너 내부 들어가기

```bash
docker attach [컨테이너 이름]
```

### 컨테이너 목록 확인

```bash
docker ps // 정지되지 않은 컨테이너만 출력
```

위 명령어에 `-a` 옵션을 붙이면 정지된 컨테이너를 포함한 모든 컨테이너를 출력한다.

### 컨테이너 삭제

```bash
docker rm [컨테이너 이름]
```

컨테이너를 삭제하려면, 컨테이너가 정지한 상태여야 한다.

```bash
docker stop [컨테이너 이름]
```

실행 중인 컨테이너를 삭제하려면 `-f` 옵션을 사용한다.

```bash
docker rm -f mycentos
```

모든 컨테이너 삭제하기

```bash
docker container prune
```

또는 `ps`를 사용하여 컨테이너 실행 상태와 관계없이 모든 컨테이너를 정지하고 삭제할 수 있다.

```bash
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
```

### 컨테이너 외부 노출

컨테이너는 가상 IP 주소를 할당받게 된다.

도커는 컨테이너에 172.17.0.x의 IP를 순차적으로 할당한다.

컨테이너 생성 후 `ifconfig` 명령어를 통해 컨테이너의 네트워크 인터페이스를 확인할 수 있다.
